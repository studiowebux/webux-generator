#!/usr/bin/env node

// ██████╗ ██╗███╗   ██╗ █████╗ ██████╗ ██╗   ██╗
// ██╔══██╗██║████╗  ██║██╔══██╗██╔══██╗╚██╗ ██╔╝
// ██████╔╝██║██╔██╗ ██║███████║██████╔╝ ╚████╔╝
// ██╔══██╗██║██║╚██╗██║██╔══██║██╔══██╗  ╚██╔╝
// ██████╔╝██║██║ ╚████║██║  ██║██║  ██║   ██║
// ╚═════╝ ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝

/**
 * File: www
 * Author: Tommy Gingras
 * Date: 2018-07-05
 * License: All rights reserved Studio Webux S.E.N.C 2015-Present
 */

'use strict';

/**
 * Module dependencies.
 */

const app = require('../app');
const fs = require('fs');
const config = require('../config/config');
const debug = require('debug')('node-rest:server');
const logger = require('../middleware/thirdParty/logger');
// eslint-disable-next-line no-unused-vars
const timestamp = require('console-timestamp');

let server;

if (config.ssl) {
  /**
   * Configure SSL certificates.
   */
  const options = {
    key: fs.readFileSync(config.path + config.sslkey),
    cert: fs.readFileSync(config.path + config.sslcert),
  };

  server = require('https').createServer(options, app);
} else {
  server = require('http').createServer(app);
}

// Socket IO
require('../sockets');

/**
 * Get port from environment and store in Express.
 */

function Header() {
  logger.log(
    'info',
    'Application started with success. Started at : ' +
      'DD-MM-YY hh:mm'.timestamp
  );
  console.log(
    '----------------------------------------------------------------------'
  );
  console.log('Version : ' + require('../package.json').version);
  console.log('Author: ' + config.author + ' | ' + config.enterprise);
  console.log(
    'Project : ' + config.project + ' is listening on port ' + port + '...'
  );
  console.log('RESTFUL API accessible from : ' + config.version);
  console.log('Mode : ' + app.get('env'));
  console.log('Working Path : ' + config.path);
  console.log(
    '----------------------------------------------------------------------'
  );
}
/**
 * Listen on provided port, on all network interfaces.
 */
const port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

console.log('Server started in ' + process.env.NODE_ENV + ' mode.');
if (!config.db.defaultValues) {
  server.listen(port, function() {
    Header();
  });
} else {
  const defaultValues = require('../middleware/init/defaultValues');
  console.log('Waiting to get the default values loaded...');
  defaultValues.on('loaded', () => {
    logger.info('Default values Loaded');
    server.listen(port, function() {
      Header();
    });
  });
}

server.on('error', onError);
server.on('listening', onListening);

// Graceful shutdown
process.on('SIGTERM', () => {
  server.close((err) => {
    if (err) {
      logger.log('error', err);
      process.exit(1);
    }
    process.exit(0);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server;
